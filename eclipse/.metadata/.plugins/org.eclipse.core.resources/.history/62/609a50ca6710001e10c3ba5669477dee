package appu26j.mods.visuals;

import org.lwjgl.opengl.GL11;

import com.google.common.eventbus.Subscribe;

import appu26j.events.render.EventRender3D;
import appu26j.interfaces.ModInterface;
import appu26j.mods.Category;
import appu26j.mods.Mod;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;

@ModInterface(name = "Cat Ears", description = "A cosmetic which gives you cat ears! Author: DistastefulBannock", category = Category.VISUALS)
public class CatEars extends Mod
{
    @Subscribe
    public void onRender3D(EventRender3D e)
    {
        if (this.mc.gameSettings.thirdPersonView == 0)
        {
            return;
        }
        
        if (this.mc.thePlayer.isSneaking())
        {
            GlStateManager.translate(0, -0.17, 0);
        }
        
        float f = 1.6F;
        float f1 = 0.016666668F * f;
        float viewX = Minecraft.getMinecraft().gameSettings.thirdPersonView == 2 ? -this.mc.getRenderManager().playerViewX : this.mc.getRenderManager().playerViewX;
        GlStateManager.pushMatrix();
        GlStateManager.translate((float)this.mc.thePlayer.posX, (float)this.mc.thePlayer.posY + this.mc.thePlayer.height + 0.5F, (float)this.mc.thePlayer.posZ);
        GL11.glNormal3f(0.0F, 1.0F, 0.0F);
        GlStateManager.rotate(-this.mc.getRenderManager().playerViewY, 0.0F, 1.0F, 0.0F);
        GlStateManager.rotate(viewX, 1.0F, 0.0F, 0.0F);
        GlStateManager.scale(-f1, -f1, f1);
        GlStateManager.disableLighting();
        Tessellator tessellator = Tessellator.getInstance();
        WorldRenderer worldrenderer = tessellator.getWorldRenderer();
        double headSize = 0.23;
        double earWidth = headSize * 0.7;
        double earLength = earWidth;
        double earSize = earWidth * 0.8;
        int mainEarR = 30;
        int mainEarG = 30;
        int mainEarB = 30;
        
        int innerEarR = 165;
        int innerEarG = 224;
        int innerEarB = 254;
        
        // Main ear
        worldrenderer.begin(GL11.GL_TRIANGLE_FAN, DefaultVertexFormats.POSITION_COLOR);
        worldrenderer.pos(headSize / 2, earSize, -earLength).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 - earWidth / 2, earSize, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2, 0, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 + earWidth / 2, earSize, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        tessellator.draw();
        worldrenderer.begin(GL11.GL_TRIANGLES, DefaultVertexFormats.POSITION_COLOR);
        worldrenderer.pos(headSize / 2 - earWidth / 2, earSize, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2, 0, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 + earWidth / 2, earSize, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        tessellator.draw();
        
        // Inner ear
        worldrenderer.begin(GL11.GL_TRIANGLE_FAN, DefaultVertexFormats.POSITION_COLOR);
        worldrenderer.pos(headSize / 2, earSize, -earLength * 0.7).color(innerEarR, innerEarG, innerEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 + earWidth / 2 - earLength * 0.23, earSize * 0.7 + earSize * 0.25 * 0.75, 0).color(innerEarR, innerEarG, innerEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2, earSize * 0.75, 0).color(mainEarR, innerEarR, innerEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 - earWidth / 2 + earLength * 0.23, earSize * 0.7 + earSize * 0.25 * 0.75, 0).color(innerEarR, innerEarG, innerEarB, 255).endVertex();
        tessellator.draw();
        worldrenderer.begin(GL11.GL_TRIANGLES, DefaultVertexFormats.POSITION_COLOR);
        worldrenderer.pos(headSize / 2 + earWidth / 2 - earLength * 0.23, earSize * 0.7 + earSize * 0.25 * 0.75, -0.001).color(innerEarR, innerEarG, innerEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2, earSize * 0.75, -0.001).color(mainEarR, innerEarR, innerEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 - earWidth / 2 + earLength * 0.23, earSize * 0.7 + earSize * 0.25 * 0.75, -0.001).color(innerEarR, innerEarG, innerEarB, 255).endVertex();
        tessellator.draw();
        
        headSize *= -1;
        
        // Main ear
        worldrenderer.begin(GL11.GL_TRIANGLE_FAN, DefaultVertexFormats.POSITION_COLOR);
        worldrenderer.pos(headSize / 2, earSize, -earLength).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 - earWidth / 2, earSize, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2, 0, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 + earWidth / 2, earSize, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        tessellator.draw();
        worldrenderer.begin(GL11.GL_TRIANGLES, DefaultVertexFormats.POSITION_COLOR);
        worldrenderer.pos(headSize / 2 - earWidth / 2, earSize, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2, 0, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 + earWidth / 2, earSize, 0).color(mainEarR, mainEarG, mainEarB, 255).endVertex();
        tessellator.draw();
        
        // Inner ear
        worldrenderer.begin(GL11.GL_TRIANGLE_FAN, DefaultVertexFormats.POSITION_COLOR);
        worldrenderer.pos(headSize / 2, earSize, -earLength * 0.7).color(innerEarR, innerEarG, innerEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 + earWidth / 2 - earLength * 0.23, earSize * 0.7 + earSize * 0.25 * 0.75, 0).color(innerEarR, innerEarG, innerEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2, earSize * 0.75, 0).color(mainEarR, innerEarR, innerEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 - earWidth / 2 + earLength * 0.23, earSize * 0.7 + earSize * 0.25 * 0.75, 0).color(innerEarR, innerEarG, innerEarB, 255).endVertex();
        tessellator.draw();
        worldrenderer.begin(GL11.GL_TRIANGLES, DefaultVertexFormats.POSITION_COLOR);
        worldrenderer.pos(headSize / 2 + earWidth / 2 - earLength * 0.23, earSize * 0.7 + earSize * 0.25 * 0.75, -0.001).color(innerEarR, innerEarG, innerEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2, earSize * 0.75, -0.001).color(mainEarR, innerEarR, innerEarB, 255).endVertex();
        worldrenderer.pos(headSize / 2 - earWidth / 2 + earLength * 0.23, earSize * 0.7 + earSize * 0.25 * 0.75, -0.001).color(innerEarR, innerEarG, innerEarB, 255).endVertex();
        tessellator.draw();

        GlStateManager.enableLighting();
        GlStateManager.disableBlend();
        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
        GlStateManager.popMatrix();
    }
}
